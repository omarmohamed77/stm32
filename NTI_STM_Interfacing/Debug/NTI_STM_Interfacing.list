
NTI_STM_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001068  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001208  08001208  00011208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800120c  0800120c  0001120c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08001210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000038  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000004c  2000004c  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003a46  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b37  00000000  00000000  00023a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000448  00000000  00000000  000245c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c0  00000000  00000000  00024a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000187a  00000000  00000000  00024dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000018dd  00000000  00000000  0002664a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00027f27  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000112c  00000000  00000000  00027fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000290d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011d8 	.word	0x080011d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080011d8 	.word	0x080011d8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <EXTI0_IRQHandler>:
		break;
	}
	return (result == 0);
}

void EXTI0_IRQHandler(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR0;
 8000a00:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <EXTI0_IRQHandler+0x1c>)
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <EXTI0_IRQHandler+0x1c>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6153      	str	r3, [r2, #20]
	handler_down();
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <EXTI0_IRQHandler+0x20>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4798      	blx	r3
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40013c00 	.word	0x40013c00
 8000a1c:	20000048 	.word	0x20000048

08000a20 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR1;
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <EXTI1_IRQHandler+0x1c>)
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <EXTI1_IRQHandler+0x1c>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	6153      	str	r3, [r2, #20]
	handler_up();
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <EXTI1_IRQHandler+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4798      	blx	r3
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40013c00 	.word	0x40013c00
 8000a40:	2000003c 	.word	0x2000003c

08000a44 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR2;
 8000a48:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <EXTI2_IRQHandler+0x1c>)
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <EXTI2_IRQHandler+0x1c>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6153      	str	r3, [r2, #20]
	handler_center();
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <EXTI2_IRQHandler+0x20>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4798      	blx	r3
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40013c00 	.word	0x40013c00
 8000a64:	20000040 	.word	0x20000040

08000a68 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR11){
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <EXTI15_10_IRQHandler+0x48>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d009      	beq.n	8000a8c <EXTI15_10_IRQHandler+0x24>
		EXTI->PR	|=  EXTI_PR_PR11;
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <EXTI15_10_IRQHandler+0x48>)
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <EXTI15_10_IRQHandler+0x48>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a82:	6153      	str	r3, [r2, #20]
		handler_right();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <EXTI15_10_IRQHandler+0x4c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4798      	blx	r3
	}
	else if(EXTI->PR & EXTI_PR_PR12){
		EXTI->PR	|=  EXTI_PR_PR12;
		handler_left();
	}
}
 8000a8a:	e00e      	b.n	8000aaa <EXTI15_10_IRQHandler+0x42>
	else if(EXTI->PR & EXTI_PR_PR12){
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <EXTI15_10_IRQHandler+0x48>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d008      	beq.n	8000aaa <EXTI15_10_IRQHandler+0x42>
		EXTI->PR	|=  EXTI_PR_PR12;
 8000a98:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <EXTI15_10_IRQHandler+0x48>)
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <EXTI15_10_IRQHandler+0x48>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa2:	6153      	str	r3, [r2, #20]
		handler_left();
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <EXTI15_10_IRQHandler+0x50>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4798      	blx	r3
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40013c00 	.word	0x40013c00
 8000ab4:	20000044 	.word	0x20000044
 8000ab8:	20000038 	.word	0x20000038

08000abc <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <RCC_DeInit+0x50>)
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <RCC_DeInit+0x50>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <RCC_DeInit+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <RCC_DeInit+0x50>)
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <RCC_DeInit+0x50>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <RCC_DeInit+0x50>)
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <RCC_DeInit+0x54>)
 8000ae6:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <RCC_DeInit+0x50>)
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <RCC_DeInit+0x58>)
 8000aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <RCC_DeInit+0x50>)
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <RCC_DeInit+0x50>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <RCC_DeInit+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	24003010 	.word	0x24003010
 8000b14:	20003000 	.word	0x20003000

08000b18 <TIM1_CC_IRQHandler>:

}
volatile uint32_t pulse_width =0;
static volatile uint32_t edge_state =0; /* 0 : rising, 1: Falling*/

void TIM1_CC_IRQHandler(void){
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	TIM1->SR	&=~TIM_SR_CC1IF;
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <TIM1_CC_IRQHandler+0x44>)
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <TIM1_CC_IRQHandler+0x44>)
 8000b20:	8a1b      	ldrh	r3, [r3, #16]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	f023 0302 	bic.w	r3, r3, #2
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	8213      	strh	r3, [r2, #16]
	if(edge_state ==0){
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <TIM1_CC_IRQHandler+0x48>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d106      	bne.n	8000b42 <TIM1_CC_IRQHandler+0x2a>
		TIM1->CNT	= 0;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <TIM1_CC_IRQHandler+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
		edge_state =1;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <TIM1_CC_IRQHandler+0x48>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
	}else{
		pulse_width = TIM1->CCR1;
		edge_state = 0;
	}

	}
 8000b40:	e006      	b.n	8000b50 <TIM1_CC_IRQHandler+0x38>
		pulse_width = TIM1->CCR1;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <TIM1_CC_IRQHandler+0x44>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <TIM1_CC_IRQHandler+0x4c>)
 8000b48:	6013      	str	r3, [r2, #0]
		edge_state = 0;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <TIM1_CC_IRQHandler+0x48>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
	}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	20000034 	.word	0x20000034
 8000b64:	20000030 	.word	0x20000030

08000b68 <Uart_Init>:
 *  Created on: Nov 18, 2020
 *      Author: omar
 */

#include "uart.h"
void Uart_Init(uint32_t baudrate){
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	uint8_t frac;
	uint16_t integ;
	float UARTDIV;

	RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8000b70:	4a45      	ldr	r2, [pc, #276]	; (8000c88 <Uart_Init+0x120>)
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <Uart_Init+0x120>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER	&= ~(3<<(2*2));
 8000b7c:	4a43      	ldr	r2, [pc, #268]	; (8000c8c <Uart_Init+0x124>)
 8000b7e:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <Uart_Init+0x124>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b86:	6013      	str	r3, [r2, #0]
	GPIOA->MODER	&= ~(3<<(3*2));
 8000b88:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <Uart_Init+0x124>)
 8000b8a:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <Uart_Init+0x124>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b92:	6013      	str	r3, [r2, #0]
	GPIOA->MODER	|= (2<<(2*2));
 8000b94:	4a3d      	ldr	r2, [pc, #244]	; (8000c8c <Uart_Init+0x124>)
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <Uart_Init+0x124>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f043 0320 	orr.w	r3, r3, #32
 8000b9e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER	|= (2<<(3*2));
 8000ba0:	4a3a      	ldr	r2, [pc, #232]	; (8000c8c <Uart_Init+0x124>)
 8000ba2:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <Uart_Init+0x124>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000baa:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0]	&= ~(0xF<<(2*4));
 8000bac:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <Uart_Init+0x124>)
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <Uart_Init+0x124>)
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bb6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]	&= ~(0xF<<(3*4));
 8000bb8:	4a34      	ldr	r2, [pc, #208]	; (8000c8c <Uart_Init+0x124>)
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <Uart_Init+0x124>)
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000bc2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]	|= (0x7<<(2*4));
 8000bc4:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <Uart_Init+0x124>)
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <Uart_Init+0x124>)
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000bce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]	|= (0x7<<(3*4));
 8000bd0:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <Uart_Init+0x124>)
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <Uart_Init+0x124>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000bda:	6213      	str	r3, [r2, #32]
	RCC->APB1ENR	|= RCC_APB1ENR_USART2EN;
 8000bdc:	4a2a      	ldr	r2, [pc, #168]	; (8000c88 <Uart_Init+0x120>)
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <Uart_Init+0x120>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40

	UARTDIV			= (SystemCoreClock/(16.0*baudrate));
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <Uart_Init+0x128>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fc2d 	bl	800044c <__aeabi_ui2d>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fc28 	bl	800044c <__aeabi_ui2d>
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <Uart_Init+0x12c>)
 8000c02:	f7ff fc99 	bl	8000538 <__aeabi_dmul>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	f7ff fdbd 	bl	800078c <__aeabi_ddiv>
 8000c12:	4603      	mov	r3, r0
 8000c14:	460c      	mov	r4, r1
 8000c16:	4618      	mov	r0, r3
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f7ff fe9f 	bl	800095c <__aeabi_d2f>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60fb      	str	r3, [r7, #12]
	integ			= (uint16_t)UARTDIV;
 8000c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c2a:	edc7 7a00 	vstr	s15, [r7]
 8000c2e:	883b      	ldrh	r3, [r7, #0]
 8000c30:	817b      	strh	r3, [r7, #10]
	frac			= (UARTDIV-integ)*16;
 8000c32:	897b      	ldrh	r3, [r7, #10]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c44:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c50:	edc7 7a00 	vstr	s15, [r7]
 8000c54:	783b      	ldrb	r3, [r7, #0]
 8000c56:	727b      	strb	r3, [r7, #9]
	USART2->BRR		=(integ<<4)+frac;
 8000c58:	490f      	ldr	r1, [pc, #60]	; (8000c98 <Uart_Init+0x130>)
 8000c5a:	897b      	ldrh	r3, [r7, #10]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	7a7b      	ldrb	r3, [r7, #9]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	810b      	strh	r3, [r1, #8]

	USART2->CR1		|=((USART_CR1_TE)|(USART_CR1_RE)|(USART_CR1_UE));
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <Uart_Init+0x130>)
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <Uart_Init+0x130>)
 8000c6e:	899b      	ldrh	r3, [r3, #12]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c76:	f043 030c 	orr.w	r3, r3, #12
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	8193      	strh	r3, [r2, #12]


}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bdb0      	pop	{r4, r5, r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	20000000 	.word	0x20000000
 8000c94:	40300000 	.word	0x40300000
 8000c98:	40004400 	.word	0x40004400

08000c9c <Uart_SendByte>:
void Uart_SendByte(uint8_t byte){
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR &USART_SR_TXE));
 8000ca6:	bf00      	nop
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <Uart_SendByte+0x30>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f8      	beq.n	8000ca8 <Uart_SendByte+0xc>
	USART2->DR 		=byte;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <Uart_SendByte+0x30>)
 8000cb8:	79fa      	ldrb	r2, [r7, #7]
 8000cba:	b292      	uxth	r2, r2
 8000cbc:	809a      	strh	r2, [r3, #4]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <Uart_SendString>:
void Uart_SendString(uint8_t* str){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	uint32_t i		=0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	while(str[i]){
 8000cdc:	e009      	b.n	8000cf2 <Uart_SendString+0x22>
		Uart_SendByte(str[i]);
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ffd8 	bl	8000c9c <Uart_SendByte>
		i++;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
	while(str[i]){
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1ef      	bne.n	8000cde <Uart_SendString+0xe>

	}
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <Uart_SendBytes>:
void Uart_SendBytes(uint8_t* buf,uint32_t len){
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b084      	sub	sp, #16
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]

	for(uint32_t i=0;i<len;i++){
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e009      	b.n	8000d2a <Uart_SendBytes+0x24>

		Uart_SendByte(buf[i]);
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffbc 	bl	8000c9c <Uart_SendByte>
	for(uint32_t i=0;i<len;i++){
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3f1      	bcc.n	8000d16 <Uart_SendBytes+0x10>
	}
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <Uart_ReceiveByte_Unblock>:

void Uart_ReceiveByte(uint8_t* pData){
	while (!(USART2->SR &USART_SR_RXNE));
	*pData = USART2->DR;
}
uint8_t Uart_ReceiveByte_Unblock(uint8_t* pData){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uint8_t status	= 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
	if((USART2->SR &USART_SR_RXNE)){
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <Uart_ReceiveByte_Unblock+0x38>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <Uart_ReceiveByte_Unblock+0x2a>
		(*pData)	= USART2->DR;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <Uart_ReceiveByte_Unblock+0x38>)
 8000d58:	889b      	ldrh	r3, [r3, #4]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	701a      	strb	r2, [r3, #0]
		status		= 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40004400 	.word	0x40004400

08000d78 <Uart_ReceiveBytes>:
/*Timeout in ms */
uint8_t Uart_ReceiveBytes(uint8_t* buf,uint32_t len,uint32_t timeout){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	uint8_t i	= 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	75fb      	strb	r3, [r7, #23]
	uint8_t status =0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	75bb      	strb	r3, [r7, #22]
	uint32_t counter	= 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]

	while (i<len && counter <timeout){
 8000d90:	e012      	b.n	8000db8 <Uart_ReceiveBytes+0x40>
		if(Uart_ReceiveByte_Unblock(buf+i)){
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffcf 	bl	8000d3c <Uart_ReceiveByte_Unblock>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <Uart_ReceiveBytes+0x34>
			i++;
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	3301      	adds	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
 8000daa:	e005      	b.n	8000db8 <Uart_ReceiveBytes+0x40>

		}
		else{
			counter++;
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	3301      	adds	r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
			delayMs(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 f816 	bl	8000de4 <delayMs>
	while (i<len && counter <timeout){
 8000db8:	7dfa      	ldrb	r2, [r7, #23]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d203      	bcs.n	8000dc8 <Uart_ReceiveBytes+0x50>
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3e4      	bcc.n	8000d92 <Uart_ReceiveBytes+0x1a>

		}
	}
	if(counter< timeout){
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d202      	bcs.n	8000dd6 <Uart_ReceiveBytes+0x5e>

		status = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	75bb      	strb	r3, [r7, #22]
 8000dd4:	e001      	b.n	8000dda <Uart_ReceiveBytes+0x62>
	}
	else{
		status =0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	75bb      	strb	r3, [r7, #22]
	}
	return status;
 8000dda:	7dbb      	ldrb	r3, [r7, #22]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <delayMs>:
 *  Created on: Nov 5, 2020
 *      Author: omar
 */
#include "delay.h"

void delayMs(uint32_t delay_ms){
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	uint32_t ind1 = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
	uint32_t ind2 = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e00e      	b.n	8000e18 <delayMs+0x34>
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	e003      	b.n	8000e08 <delayMs+0x24>
			asm("NOP");
 8000e00:	bf00      	nop
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d9f6      	bls.n	8000e00 <delayMs+0x1c>
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d3ec      	bcc.n	8000dfa <delayMs+0x16>
		}
	}
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <main>:
	Leds_Toggle(0xFF);
}


int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09a      	sub	sp, #104	; 0x68
 8000e30:	af00      	add	r7, sp, #0





	uint8_t key = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	/* Clock -> Internal 16 MHz */
	RCC_DeInit();			/* Adapt PLL to the internal 16 MHz RC oscillator */
 8000e38:	f7ff fe40 	bl	8000abc <RCC_DeInit>
	SystemCoreClockUpdate();	/* Update SystemCoreClock */
 8000e3c:	f000 f8b0 	bl	8000fa0 <SystemCoreClockUpdate>
	uint8_t data	= 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t buf[100];


	Uart_Init(9600);
 8000e46:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000e4a:	f7ff fe8d 	bl	8000b68 <Uart_Init>
	if(Uart_ReceiveBytes(buf,5,10000)){
 8000e4e:	463b      	mov	r3, r7
 8000e50:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e54:	2105      	movs	r1, #5
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff8e 	bl	8000d78 <Uart_ReceiveBytes>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d008      	beq.n	8000e74 <main+0x48>
		Uart_SendString("\nRX data: \n");
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <main+0x50>)
 8000e64:	f7ff ff34 	bl	8000cd0 <Uart_SendString>
		Uart_SendBytes(buf,5);
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff4a 	bl	8000d06 <Uart_SendBytes>
 8000e72:	e002      	b.n	8000e7a <main+0x4e>
	}else{
			Uart_SendString("\n timeout\n");
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <main+0x54>)
 8000e76:	f7ff ff2b 	bl	8000cd0 <Uart_SendString>

		}
	while(1){
 8000e7a:	e7fe      	b.n	8000e7a <main+0x4e>
 8000e7c:	080011f0 	.word	0x080011f0
 8000e80:	080011fc 	.word	0x080011fc

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e8a:	e003      	b.n	8000e94 <LoopCopyDataInit>

08000e8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e92:	3104      	adds	r1, #4

08000e94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e9c:	d3f6      	bcc.n	8000e8c <CopyDataInit>
  ldr  r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ea0:	e002      	b.n	8000ea8 <LoopFillZerobss>

08000ea2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ea2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ea4:	f842 3b04 	str.w	r3, [r2], #4

08000ea8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eac:	d3f9      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eae:	f000 f841 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f000 f96d 	bl	8001190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff ffb9 	bl	8000e2c <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ebc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ec0:	08001210 	.word	0x08001210
  ldr  r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ec8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ecc:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000ed0:	2000004c 	.word	0x2000004c

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>

08000ed6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <HardFault_Handler+0x4>

08000eea <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <SystemInit+0x60>)
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <SystemInit+0x60>)
 8000f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f48:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <SystemInit+0x64>)
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <SystemInit+0x64>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <SystemInit+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <SystemInit+0x64>)
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <SystemInit+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <SystemInit+0x64>)
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <SystemInit+0x68>)
 8000f6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <SystemInit+0x64>)
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <SystemInit+0x64>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000f82:	f000 f889 	bl	8001098 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f86:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <SystemInit+0x60>)
 8000f88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8c:	609a      	str	r2, [r3, #8]
#endif
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	24003010 	.word	0x24003010

08000fa0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	2302      	movs	r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <SystemCoreClockUpdate+0xe4>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d007      	beq.n	8000fda <SystemCoreClockUpdate+0x3a>
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d009      	beq.n	8000fe2 <SystemCoreClockUpdate+0x42>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d13d      	bne.n	800104e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <SystemCoreClockUpdate+0xe8>)
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <SystemCoreClockUpdate+0xec>)
 8000fd6:	601a      	str	r2, [r3, #0]
      break;
 8000fd8:	e03d      	b.n	8001056 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <SystemCoreClockUpdate+0xe8>)
 8000fdc:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <SystemCoreClockUpdate+0xf0>)
 8000fde:	601a      	str	r2, [r3, #0]
      break;
 8000fe0:	e039      	b.n	8001056 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <SystemCoreClockUpdate+0xe4>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	0d9b      	lsrs	r3, r3, #22
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <SystemCoreClockUpdate+0xe4>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ff6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <SystemCoreClockUpdate+0xf0>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <SystemCoreClockUpdate+0xe4>)
 8001008:	6852      	ldr	r2, [r2, #4]
 800100a:	0992      	lsrs	r2, r2, #6
 800100c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e00b      	b.n	8001030 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <SystemCoreClockUpdate+0xec>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <SystemCoreClockUpdate+0xe4>)
 8001022:	6852      	ldr	r2, [r2, #4]
 8001024:	0992      	lsrs	r2, r2, #6
 8001026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <SystemCoreClockUpdate+0xe4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	0c1b      	lsrs	r3, r3, #16
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	3301      	adds	r3, #1
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <SystemCoreClockUpdate+0xe8>)
 800104a:	6013      	str	r3, [r2, #0]
      break;
 800104c:	e003      	b.n	8001056 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <SystemCoreClockUpdate+0xe8>)
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <SystemCoreClockUpdate+0xec>)
 8001052:	601a      	str	r2, [r3, #0]
      break;
 8001054:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <SystemCoreClockUpdate+0xe4>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <SystemCoreClockUpdate+0xf4>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <SystemCoreClockUpdate+0xe8>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <SystemCoreClockUpdate+0xe8>)
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	20000000 	.word	0x20000000
 800108c:	00f42400 	.word	0x00f42400
 8001090:	017d7840 	.word	0x017d7840
 8001094:	20000004 	.word	0x20000004

08001098 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010a6:	4a36      	ldr	r2, [pc, #216]	; (8001180 <SetSysClock+0xe8>)
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <SetSysClock+0xe8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <SetSysClock+0xe8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <SetSysClock+0x38>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010ce:	d1f0      	bne.n	80010b2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <SetSysClock+0xe8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010dc:	2301      	movs	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	e001      	b.n	80010e6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d142      	bne.n	8001172 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <SetSysClock+0xe8>)
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <SetSysClock+0xe8>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <SetSysClock+0xec>)
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <SetSysClock+0xec>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001102:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001104:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <SetSysClock+0xe8>)
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <SetSysClock+0xe8>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800110c:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <SetSysClock+0xe8>)
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <SetSysClock+0xe8>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001116:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001118:	4a19      	ldr	r2, [pc, #100]	; (8001180 <SetSysClock+0xe8>)
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <SetSysClock+0xe8>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001122:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <SetSysClock+0xe8>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <SetSysClock+0xf0>)
 8001128:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <SetSysClock+0xe8>)
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <SetSysClock+0xe8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001134:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001136:	bf00      	nop
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <SetSysClock+0xe8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f9      	beq.n	8001138 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <SetSysClock+0xf4>)
 8001146:	f240 7205 	movw	r2, #1797	; 0x705
 800114a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <SetSysClock+0xe8>)
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <SetSysClock+0xe8>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f023 0303 	bic.w	r3, r3, #3
 8001156:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <SetSysClock+0xe8>)
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <SetSysClock+0xe8>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001164:	bf00      	nop
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SetSysClock+0xe8>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b08      	cmp	r3, #8
 8001170:	d1f9      	bne.n	8001166 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000
 8001188:	07405419 	.word	0x07405419
 800118c:	40023c00 	.word	0x40023c00

08001190 <__libc_init_array>:
 8001190:	b570      	push	{r4, r5, r6, lr}
 8001192:	4e0d      	ldr	r6, [pc, #52]	; (80011c8 <__libc_init_array+0x38>)
 8001194:	4c0d      	ldr	r4, [pc, #52]	; (80011cc <__libc_init_array+0x3c>)
 8001196:	1ba4      	subs	r4, r4, r6
 8001198:	10a4      	asrs	r4, r4, #2
 800119a:	2500      	movs	r5, #0
 800119c:	42a5      	cmp	r5, r4
 800119e:	d109      	bne.n	80011b4 <__libc_init_array+0x24>
 80011a0:	4e0b      	ldr	r6, [pc, #44]	; (80011d0 <__libc_init_array+0x40>)
 80011a2:	4c0c      	ldr	r4, [pc, #48]	; (80011d4 <__libc_init_array+0x44>)
 80011a4:	f000 f818 	bl	80011d8 <_init>
 80011a8:	1ba4      	subs	r4, r4, r6
 80011aa:	10a4      	asrs	r4, r4, #2
 80011ac:	2500      	movs	r5, #0
 80011ae:	42a5      	cmp	r5, r4
 80011b0:	d105      	bne.n	80011be <__libc_init_array+0x2e>
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
 80011b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011b8:	4798      	blx	r3
 80011ba:	3501      	adds	r5, #1
 80011bc:	e7ee      	b.n	800119c <__libc_init_array+0xc>
 80011be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011c2:	4798      	blx	r3
 80011c4:	3501      	adds	r5, #1
 80011c6:	e7f2      	b.n	80011ae <__libc_init_array+0x1e>
 80011c8:	08001208 	.word	0x08001208
 80011cc:	08001208 	.word	0x08001208
 80011d0:	08001208 	.word	0x08001208
 80011d4:	0800120c 	.word	0x0800120c

080011d8 <_init>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	bf00      	nop
 80011dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011de:	bc08      	pop	{r3}
 80011e0:	469e      	mov	lr, r3
 80011e2:	4770      	bx	lr

080011e4 <_fini>:
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	bf00      	nop
 80011e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ea:	bc08      	pop	{r3}
 80011ec:	469e      	mov	lr, r3
 80011ee:	4770      	bx	lr
